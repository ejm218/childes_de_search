# IMPORT CHILDES SEARCH FUNCTIONS
import os
import matplotlib as plt
os.chdir("/Users/academic/Documents/childes_de_search")
functions_file = open("childes_search.py", "r")
functions_file = functions_file.read()
exec(functions_file)

# IMPORT THE CORPORA FOR USE IN THE SEARCH
# INCLUSION CRITERIA: AGES 1-6
chang1 = CHILDESCorpusReader(corpus_root, "Chang1/.*.xml") # youngest age 3;0
chang2 = CHILDESCorpusReader(corpus_root, "Chang2/.*.xml") # youngest age 3;0
changplay = CHILDESCorpusReader(corpus_root, "ChangPlay/.*.xml") # youngest age 3;0
erbaugh = CHILDESCorpusReader(corpus_root, "Erbaugh/.*.xml") # youngest age 2;0
lizhou = CHILDESCorpusReader(corpus_root, "LiZhou/.*.xml") # youngest age 3;0
tong = CHILDESCorpusReader(corpus_root, "Tong/.*.xml") # youngest age 1;7
zhou1 = CHILDESCorpusReader(corpus_root, "Zhou1/.*.xml") # youngest age 3;0
zhou2 = CHILDESCorpusReader(corpus_root, "Zhou2/.*.xml") # youngest age 3;0
zhou3 = CHILDESCorpusReader(corpus_root, "Zhou3/.*.xml") # youngest age 0;8
corpora = [chang1, chang2, changplay, erbaugh, lizhou, tong, zhou1, zhou2, zhou3]

# what do I want to find out
# when de emerges
# what types of items it is used to modify
np_search = "n:?[a-z]*|pro:?[a-z]*" # finds all nouns and pronouns
vp_search = "v:?[a-z]*" # finds all verbs

#data = pd.DataFrame(columns = ["filename", "age", "full_utterance", "search_term_tag", "preceding_item", "preceding_item_type", "succeeding_item", "succeeding_item_type"])
#for corpus in corpora:
#    corpus_data = corpus_search_MOR(corpus, "的")
#    for item in corpus_data:
#        data = data.append(corpus_data, ignore_index=True)
data = create_df(multicorpus_search_MOR(corpora, "的"))
data = data["preceding_item_type"].replace(np_search, "NP", regex=True)
data = data["succeeding_item_type"].replace(np_search, "NP", regex=True)
data = data["preceding_item_type"].replace(vp_search, "VP", regex=True)
data = data["succeeding_item_type"].replace(vp_search, "VP", regex=True)
print(data.head())
print(data.tail())

modifier_types = data["preceding_item_type"].value_counts()
print(type(modifier_types))
head_types = data["succeeding_item_type"].value_counts()
print(head_types)
variety = data["preceding_item_type"].nunique()
print(variety)
print(data.head())

ages = list(set(data["age"].tolist()))
count_data = {
    "age": [],
    "total_de": [],
    "np_head": [],
    "vp_head": [],
    "sentence_final": [],
    "prec_adj": [],
    "prec_np": [],
    "prec_vp": []
    }
#print(data.groupby("age").succeeding_item_type.nunique())
for age in ages:
    target_data = data[(data["age"] == age)]
    count_data["age"].append(age)
    count_data["total_de"].append(len(target_data))
    count_data["np_head"].append(len(target_data[(target_data["succeeding_item_type"] == "NP")]))
    count_data["vp_head"].append(len(target_data[(target_data["succeeding_item_type"] == "VP")]))
    count_data["sentence_final"].append(len(target_data[(target_data["succeeding_item_type"] == "NA")]))
    count_data["prec_adj"].append(len(target_data[(target_data["preceding_item_type"] == "adj")]))
    count_data["prec_np"].append(len(target_data[(target_data["preceding_item_type"] == "NP")]))
    count_data["prec_vp"].append(len(target_data[(target_data["preceding_item_type"] == "VP")]))
print(count_data)
count_data = create_df(count_data)
#print(data[data["succeeding_item_type"] == "sfp"])

# for each month i want to
    # see number of sentence-final de
    # see number of adj preceding de
    # see number of n prceding de
    # see number of
